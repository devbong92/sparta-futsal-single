// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// 유저
model users {
  id Int @id @default(autoincrement()) 
  email String @unique
  password String 
  nickname String @unique
  cash Int @default(10000)
  rating Int @default(1000)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  usersPlayers usersPlayers[]
  playUserResultLogs gameResultLogs[] @relation(name: "playUser")
  otherUserResultLogs gameResultLogs[] @relation(name: "otherUser")
  rankHistory rankHistory[] 
}

// 선수 
model players {
  playerId Int @id @default(autoincrement()) 
  playerName String @map("player_name")
  speed Int
  finishing Int
  shotPower Int @map("shot_power")
  defense Int
  stamina Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  usersPlayers usersPlayers[]
}

// 보유 선수 테이블 
model usersPlayers {
  userPlayerId Int @id @default(autoincrement()) @map("user_player_id")
  userId Int @map("user_id")
  playerId Int @map("player_id")
  level Int @default(1)
  isStarting Boolean @default(false) @map("is_starting")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)
  player players @relation(fields: [playerId], references: [playerId], onDelete: Cascade)

  @@map("users_players")
}

// 경기 이력 테이블 
model gameResultLogs {
  gameResultsId Int @id @default(autoincrement()) @map("game_results_id")
  playUserId Int @map("play_user_id")
  otherUserId Int @map("other_userId")
  playUserPoint Int @map("play_user_point")
  otherUserPoint Int @map("other_user_point")
  gameResult String @map("game_result")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  playUser users @relation(name: "playUser", fields: [playUserId], references: [id], onDelete: Cascade)
  otherUser users @relation(name: "otherUser", fields: [otherUserId], references: [id], onDelete: Cascade)

  @@map("game_result_logs")
}


// 랭킹 이력 테이블 
model rankHistory {
  rankHistId Int @id @default(autoincrement()) @map("rank_hist_id")
  calcDate String @map("calc_date")
  userId Int @map("user_id")
  userNickname String @map("user_nickname")
  winCount Int @map("win_count")
  drawCount Int @map("draw_count")
  loseCount Int @map("lose_count")
  rating Int 
  ranking Int
  rankingChange Int @map("ranking_change")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([calcDate,userId])
  @@map("rank_history")
}